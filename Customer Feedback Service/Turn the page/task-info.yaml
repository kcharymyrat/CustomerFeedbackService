type: edu
files:
  - name: src/feedbackservice/FeedbackApplication.java
    visible: true
    text: |
      package feedbackservice;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class FeedbackApplication {
          public static void main(String[] args) {
              SpringApplication.run(FeedbackApplication.class, args);
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |
      spring.data.mongodb.host=localhost
      spring.data.mongodb.port=27017
      spring.data.mongodb.database=feedback_db
      
      mongodb.image=mongo:5
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
          implementation 'org.testcontainers:mongodb:1.17.5'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/FeedbackItem.java
    visible: false
    text: |
      import java.util.Random;
      import java.util.stream.Stream;
      
      class FeedbackItem {
          private String id;
          private Integer rating;
          private String feedback;
          private String customer;
          private String product;
          private String vendor;
      
          public String getId() {
              return id;
          }
      
          public void setId(String id) {
              this.id = id;
          }
      
          public Integer getRating() {
              return rating;
          }
      
          public void setRating(Integer rating) {
              this.rating = rating;
          }
      
          public String getFeedback() {
              return feedback;
          }
      
          public void setFeedback(String feedback) {
              this.feedback = feedback;
          }
      
          public String getCustomer() {
              return customer;
          }
      
          public void setCustomer(String customer) {
              this.customer = customer;
          }
      
          public String getProduct() {
              return product;
          }
      
          public void setProduct(String product) {
              this.product = product;
          }
      
          public String getVendor() {
              return vendor;
          }
      
          public void setVendor(String vendor) {
              this.vendor = vendor;
          }
      }
      
      class FeedbackItemMother {
          private static final Random rnd = new Random();
          private static final String[] products = {
                  "Apple iPhone 13", "Samsung Galaxy S21", "Sony PlayStation 5", "Microsoft Xbox Series X",
                  "Bose QuietComfort 35 II Headphones", "Amazon Echo Dot (4th Generation)",
                  "Apple MacBook Pro (16 inch, M1 Pro)", "Dyson V11 Torque Drive Cordless Vacuum Cleaner",
                  "Instant Pot Duo 7-in-1 Electric Pressure Cooker", "Samsung 55\" Class QLED Q80A Series - 4K UHD TV"
          };
          private static final String[] feedback = {
                  "Lorem ipsum dolor sit amet.", "Consectetur adipiscing elit.", "Duis aute irure dolor.",
                  "In reprehenderit in voluptate velit.", "Esse cillum dolore eu fugiat.",
                  "Nulla pariatur excepteur sint occaecat.", "Cupidatat non proident, sunt in culpa."
          };
          private static final String[] customers = {
                  "John Doe", "Jane Smith", "Emily Johnson", "Robert Brown", "Patricia Davis", "Michael Miller",
                  "Elizabeth Garcia", "William Martinez", "Jennifer Robinson", "Charles Wilson"
          };
          private static final String[] vendors = {
                  "BlueSky Electronics", "Pinnacle Home Appliances", "Quantum Computing Solutions",
                  "Nebula Network Devices", "TerraFirma Outdoor Gear"
          };
      
          private FeedbackItemMother() { }
      
          public static FeedbackItem create() {
              var item = new FeedbackItem();
              item.setRating(rnd.nextInt(1, 6));
              item.setFeedback(feedback[rnd.nextInt(feedback.length)]);
              item.setCustomer(customers[rnd.nextInt(customers.length)]);
              item.setProduct(products[rnd.nextInt(products.length)]);
              item.setVendor(vendors[rnd.nextInt(vendors.length)]);
              return item;
          }
      
          public static FeedbackItem noCustomer() {
              var item = create();
              item.setCustomer(null);
              return item;
          }
      
          public static FeedbackItem noFeedback() {
              var item = create();
              item.setFeedback(null);
              return item;
          }
      
          public static FeedbackItem noFeedbackNoCustomer() {
              var item = create();
              item.setFeedback(null);
              item.setCustomer(null);
              return item;
          }
      
          public static FeedbackItem createRandom() {
              var dice = rnd.nextInt(100);
              if (dice < 50) {
                  return create();
              } else if (dice < 70) {
                  return noFeedback();
              } else if (dice < 90) {
                  return noCustomer();
              } else {
                  return noFeedbackNoCustomer();
              }
          }
      
          public static FeedbackItem[] createRandomInRange(int min, int max) {
              return Stream.generate(FeedbackItemMother::createRandom)
                      .limit(rnd.nextInt(min, max))
                      .toArray(FeedbackItem[]::new);
          }
      }
    learner_created: false
  - name: test/FeedbackServiceTests.java
    visible: false
    text: |
      import com.google.gson.Gson;
      import com.mongodb.ConnectionString;
      import com.mongodb.MongoClientSettings;
      import com.mongodb.MongoException;
      import com.mongodb.ServerApi;
      import com.mongodb.ServerApiVersion;
      import com.mongodb.client.MongoClient;
      import com.mongodb.client.MongoClients;
      import com.mongodb.client.MongoDatabase;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonObjectBuilder;
      
      import java.util.Arrays;
      import java.util.Comparator;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isNull;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;
      
      public class FeedbackServiceTests extends SpringTest {
          private static final String mongoUrl = "mongodb://localhost:27017";
          private static final String mongoDatabase = "feedback_db";
          private static final String mongoCollection = "feedback";
          private static final int defaultPageSize = 10;
          private static final int minPageSize = 5;
          private static final int maxPageSize = 20;
          private final Gson gson = new Gson();
          private final FeedbackItem[] feedbackItems = FeedbackItemMother.createRandomInRange(51, 52);
      
          CheckResult testPostFeedback(FeedbackItem[] data) {
              for (var item : data) {
                  var payload = gson.toJson(item);
                  HttpResponse response = post("/feedback", payload).send();
      
                  checkStatusCode(response, 201);
      
                  var location = response.getHeaders().get("Location");
                  if (location == null || !location.matches("/feedback/[a-f0-9]{24}")) {
                      return CheckResult.wrong("""
                              Request: POST /feedback
                              Expected to find the 'Location' header with a document URL '/feedback/<ObjectId>',
                              but found: %s
                              """.formatted(location));
                  }
      
                  var id = location.replaceAll(".+/", "");
                  item.setId(id);
              }
              return CheckResult.correct();
          }
      
          CheckResult testGetFeedbackById(FeedbackItem[] data) {
              for (var item : data) {
                  var response = get("/feedback/" + item.getId()).send();
                  checkStatusCode(response, 200);
                  var objectBuilder = getJsonObjectBuilderFrom(item);
                  expect(response.getContent()).asJson().check(objectBuilder);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testNotFoundById(FeedbackItem[] data) {
              for (var item : data) {
                  var id = new StringBuilder(item.getId()).reverse().toString();
                  var response = get("/feedback/" + id).send();
                  checkStatusCode(response, 404);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testGetAllSortedById(FeedbackItem[] data, int page, int size) {
              var limit = size < minPageSize || size > maxPageSize ? defaultPageSize : size;
              var offset = page <= 0 ? 0 : (page - 1) * limit;
              var sortedAndPagedData = Arrays.stream(data).sorted(Comparator.comparing(FeedbackItem::getId).reversed())
                      .skip(offset)
                      .limit(limit)
                      .toList();
      
              var request = get("/feedback");
              if (page != 0) {
                  request.addParam("page", String.valueOf(page));
              }
              if (size != 0) {
                  request.addParam("perPage", String.valueOf(size));
              }
      
              var response = request.send();
              checkStatusCode(response, 200);
      
              JsonObjectBuilder rootObjectBuilder = isObject()
                      .value("total_documents", data.length)
                      .value("is_first_page", page < 2)
                      .value("is_last_page", (offset + limit) >= data.length);
      
              JsonArrayBuilder arrayBuilder = isArray(sortedAndPagedData.size());
              for (var item : sortedAndPagedData) {
                  JsonObjectBuilder objectBuilder = getJsonObjectBuilderFrom(item);
                  arrayBuilder = arrayBuilder.item(objectBuilder);
              }
      
              rootObjectBuilder.value("documents", arrayBuilder);
      
              expect(response.getContent()).asJson().check(rootObjectBuilder);
      
              return CheckResult.correct();
          }
      
          CheckResult testMongoCollection(FeedbackItem[] data) {
              ServerApi serverApi = ServerApi.builder()
                      .version(ServerApiVersion.V1)
                      .build();
      
              MongoClientSettings settings = MongoClientSettings.builder()
                      .applyConnectionString(new ConnectionString(mongoUrl))
                      .serverApi(serverApi)
                      .build();
      
              try (MongoClient mongoClient = MongoClients.create(settings)) {
                  MongoDatabase database = mongoClient.getDatabase(mongoDatabase);
                  var count = database.getCollection(mongoCollection).countDocuments();
                  if (count != data.length) {
                      return CheckResult.wrong("""
                              Wrong number of documents in the '%s' collection in the '%s' database.
                              Expected: %d documents but found: %d")
                              """.formatted(mongoCollection, mongoDatabase, feedbackItems.length, count));
                  }
              } catch (MongoException e) {
                  return CheckResult.wrong("Failed to connect the 'feedback_db' database");
              }
              return CheckResult.correct();
          }
      
          private void checkStatusCode(HttpResponse response, int expected) {
              var method = response.getRequest().getMethod();
              var endpoint = response.getRequest().getUri();
              var body = response.getRequest().getContent();
              var actual = response.getStatusCode();
      
              if (response.getStatusCode() != expected) {
                  throw new WrongAnswer("""
                          Request: %s %s
                          Request body: %s
                          Expected response status code %d but received %d
                          """.formatted(method, endpoint, body, expected, actual));
              }
          }
      
          private JsonObjectBuilder getJsonObjectBuilderFrom(FeedbackItem item) {
              var objectBuilder = isObject()
                      .value("id", item.getId())
                      .value("rating", item.getRating())
                      .value("product", item.getProduct())
                      .value("vendor", item.getVendor());
      
              var customer = item.getCustomer() == null ? isNull() : isString(s -> s.equals(item.getCustomer()));
              objectBuilder = objectBuilder.value("customer", customer);
              var feedback = item.getFeedback() == null ? isNull() : isString(s -> s.equals(item.getFeedback()));
              objectBuilder = objectBuilder.value("feedback", feedback);
      
              return objectBuilder;
          }
      
          @DynamicTest
          DynamicTesting[] dt = {
                  () -> testPostFeedback(feedbackItems),
                  () -> testGetFeedbackById(feedbackItems),
                  () -> testNotFoundById(feedbackItems),
                  () -> testGetAllSortedById(feedbackItems, 1, 10),
                  () -> testGetAllSortedById(feedbackItems, 1, 0),
                  () -> testGetAllSortedById(feedbackItems, 0, 10),
                  () -> testGetAllSortedById(feedbackItems, 0, 25),
                  () -> testGetAllSortedById(feedbackItems, -1, 0),
                  () -> testGetAllSortedById(feedbackItems, 2, 25),
                  () -> testGetAllSortedById(feedbackItems, -1, 8),
                  () -> testGetAllSortedById(feedbackItems, 3, 4),
                  () -> testGetAllSortedById(feedbackItems, 0, 0),
                  () -> testGetAllSortedById(feedbackItems, 7, 7),
                  () -> testGetAllSortedById(feedbackItems, 8, 7),
                  () -> testGetAllSortedById(feedbackItems, 4, 20),
                  () -> testMongoCollection(feedbackItems),
          };
      }
    learner_created: false
feedback_link: https://hyperskill.org/projects/409/stages/2397/implement#comment
status: Unchecked
record: -1
